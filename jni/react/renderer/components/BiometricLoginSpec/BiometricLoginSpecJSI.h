/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativeBiometricLoginUser

template <typename P0, typename P1>
struct NativeBiometricLoginUser {
  P0 username;
  P1 password;
  bool operator==(const NativeBiometricLoginUser &other) const {
    return username == other.username && password == other.password;
  }
};

template <typename T>
struct NativeBiometricLoginUserBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.username)>(rt, value.getProperty(rt, "username"), jsInvoker),
      bridging::fromJs<decltype(types.password)>(rt, value.getProperty(rt, "password"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String usernameToJs(jsi::Runtime &rt, decltype(types.username) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String passwordToJs(jsi::Runtime &rt, decltype(types.password) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "username", bridging::toJs(rt, value.username, jsInvoker));
    result.setProperty(rt, "password", bridging::toJs(rt, value.password, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeBiometricLoginCxxSpecJSI : public TurboModule {
protected:
  NativeBiometricLoginCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value BiometricIsAvailable(jsi::Runtime &rt) = 0;
  virtual jsi::Value BasicBiometricAuth(jsi::Runtime &rt, jsi::String title, jsi::String desc) = 0;
  virtual jsi::Value LoginBiometricAuth(jsi::Runtime &rt, jsi::String title, jsi::String desc) = 0;
  virtual jsi::Value SetUser(jsi::Runtime &rt, jsi::String username, jsi::String password) = 0;
  virtual jsi::Value UpdateUser(jsi::Runtime &rt, jsi::String username, jsi::String password) = 0;
  virtual jsi::Value GetUser(jsi::Runtime &rt) = 0;
  virtual jsi::Value DeleteUser(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeBiometricLoginCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "BiometricLogin";

protected:
  NativeBiometricLoginCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeBiometricLoginCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeBiometricLoginCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeBiometricLoginCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value BiometricIsAvailable(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::BiometricIsAvailable) == 1,
          "Expected BiometricIsAvailable(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::BiometricIsAvailable, jsInvoker_, instance_);
    }
    jsi::Value BasicBiometricAuth(jsi::Runtime &rt, jsi::String title, jsi::String desc) override {
      static_assert(
          bridging::getParameterCount(&T::BasicBiometricAuth) == 3,
          "Expected BasicBiometricAuth(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::BasicBiometricAuth, jsInvoker_, instance_, std::move(title), std::move(desc));
    }
    jsi::Value LoginBiometricAuth(jsi::Runtime &rt, jsi::String title, jsi::String desc) override {
      static_assert(
          bridging::getParameterCount(&T::LoginBiometricAuth) == 3,
          "Expected LoginBiometricAuth(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::LoginBiometricAuth, jsInvoker_, instance_, std::move(title), std::move(desc));
    }
    jsi::Value SetUser(jsi::Runtime &rt, jsi::String username, jsi::String password) override {
      static_assert(
          bridging::getParameterCount(&T::SetUser) == 3,
          "Expected SetUser(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::SetUser, jsInvoker_, instance_, std::move(username), std::move(password));
    }
    jsi::Value UpdateUser(jsi::Runtime &rt, jsi::String username, jsi::String password) override {
      static_assert(
          bridging::getParameterCount(&T::UpdateUser) == 3,
          "Expected UpdateUser(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::UpdateUser, jsInvoker_, instance_, std::move(username), std::move(password));
    }
    jsi::Value GetUser(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::GetUser) == 1,
          "Expected GetUser(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::GetUser, jsInvoker_, instance_);
    }
    jsi::Value DeleteUser(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::DeleteUser) == 1,
          "Expected DeleteUser(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::DeleteUser, jsInvoker_, instance_);
    }

  private:
    friend class NativeBiometricLoginCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react

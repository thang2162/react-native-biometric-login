/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "BiometricLoginSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_BiometricIsAvailable(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->BiometricIsAvailable(
    rt
  );
}
static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_BasicBiometricAuth(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->BasicBiometricAuth(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_LoginBiometricAuth(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->LoginBiometricAuth(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_SetUser(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->SetUser(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_UpdateUser(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->UpdateUser(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_GetUser(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->GetUser(
    rt
  );
}
static jsi::Value __hostFunction_NativeBiometricLoginCxxSpecJSI_DeleteUser(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeBiometricLoginCxxSpecJSI *>(&turboModule)->DeleteUser(
    rt
  );
}

NativeBiometricLoginCxxSpecJSI::NativeBiometricLoginCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("BiometricLogin", jsInvoker) {
  methodMap_["BiometricIsAvailable"] = MethodMetadata {0, __hostFunction_NativeBiometricLoginCxxSpecJSI_BiometricIsAvailable};
  methodMap_["BasicBiometricAuth"] = MethodMetadata {2, __hostFunction_NativeBiometricLoginCxxSpecJSI_BasicBiometricAuth};
  methodMap_["LoginBiometricAuth"] = MethodMetadata {2, __hostFunction_NativeBiometricLoginCxxSpecJSI_LoginBiometricAuth};
  methodMap_["SetUser"] = MethodMetadata {2, __hostFunction_NativeBiometricLoginCxxSpecJSI_SetUser};
  methodMap_["UpdateUser"] = MethodMetadata {2, __hostFunction_NativeBiometricLoginCxxSpecJSI_UpdateUser};
  methodMap_["GetUser"] = MethodMetadata {0, __hostFunction_NativeBiometricLoginCxxSpecJSI_GetUser};
  methodMap_["DeleteUser"] = MethodMetadata {0, __hostFunction_NativeBiometricLoginCxxSpecJSI_DeleteUser};
}


} // namespace facebook::react
